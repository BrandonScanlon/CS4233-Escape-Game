 case ORTHOGONAL:
        // Move by row or column only
        direction = "NONE";
        prevDeltaRow = deltaRow;
        prevDeltaCol = deltaCol;

        while(deltaRow != 0 || deltaCol != 0) {
          if(deltaRow > deltaCol || (deltaRow < 0 && deltaCol >= 0) || (deltaRow == deltaCol)) {
            if(deltaRow > 0 || (direction == "NONE" || direction == "UP")) { // Move Up
              if(tempGameBoard.getBoardLocation(newFrom.getRow(), newFrom.getColumn()).getPieceName() == EscapePiece.PieceName.BIRD) {
                moveUp();
                moves++;
              }
              // No Fly
              else {
                CoordinateImpl upCoord = tempGameBoard.getBoardLocation(newFrom.getRow() + 1, newFrom.getColumn());
                if(checkForObstacles(tempGameBoard, upCoord)) { // Can't go up, try right
                  CoordinateImpl rightCoord = tempGameBoard.getBoardLocation(newFrom.getRow(), newFrom.getColumn() + 1);
                  if(checkForObstacles(tempGameBoard, rightCoord)) { //Can't go right, try left
                    CoordinateImpl leftCoord = tempGameBoard.getBoardLocation(newFrom.getRow(), newFrom.getColumn() - 1);
                    if(checkForObstacles(tempGameBoard, leftCoord)) { //Can't go left, try down
                      CoordinateImpl downCoord = tempGameBoard.getBoardLocation(newFrom.getRow() - 1, newFrom.getColumn());
                      if(checkForObstacles(tempGameBoard, downCoord)) { //Can't go down, invalid move (blocked on all accounts)
                        gameStatus.setValidMove(false);
                        return gameStatus;
                      } else { // Could go Down
                        moveDown();
                        moves++;
                        direction = "RIGHT";
                      }
                    } else {  // Could go Left
                      moveLeft();
                      moves++;
                      direction = "UP";
                      continue;
                    }
                  } else {  // Could go Right
                    moveRight();
                    moves++;
                    direction = "UP";
                    continue;
                  }
                } else { // Could go Up
//                  if()
                  moveUp();
                  moves++;
                  continue;
                }
              }
            } else if(deltaRow < 0 && (direction == "NONE" || direction == "DOWN")) { // Move Down
              if(tempGameBoard.getBoardLocation(newFrom.getRow(), newFrom.getColumn()).getPieceName() == EscapePiece.PieceName.BIRD) {
                moveDown();
                moves++;
              } else {
                LocationType coordinateType = tempGameBoard.getBoardLocation(newFrom.getRow() + 1, newFrom.getColumn()).getLocationType();
                if(coordinateType != LocationType.CLEAR) {
                  gameStatus.setValidMove(false);
                  return gameStatus;
                } else {
                  CoordinateImpl downCoord = tempGameBoard.getBoardLocation(newFrom.getRow() - 1, newFrom.getColumn());
                  if(checkForObstacles(tempGameBoard, downCoord)) {
                    gameStatus.setValidMove(false);
                    return gameStatus;
                  } else {
                    moveDown();
                    moves++;
                  }
                }
              }
            }
          }
          //if(deltaRow < deltaCol || (deltaRow >= 0 && deltaCol < 0)) {
            if(deltaCol < 0 && (direction == "NONE" || direction == "LEFT")) { // Move Left
              if(tempGameBoard.getBoardLocation(newFrom.getRow(), newFrom.getColumn()).getPieceName() == EscapePiece.PieceName.BIRD) {
                moveLeft();
                moves++;
              } else {
                if(tempGameBoard.getBoardLocation(newFrom.getRow() + 1, newFrom.getColumn()).getLocationType() != LocationType.CLEAR) {
                  gameStatus.setValidMove(false);
                  return gameStatus;
                } else {
                  CoordinateImpl leftCoord = tempGameBoard.getBoardLocation(newFrom.getRow(), newFrom.getColumn() - 1);
                  if(checkForObstacles(tempGameBoard, leftCoord)) {
                    gameStatus.setValidMove(false);
                    return gameStatus;
                  } else {
                    moveLeft();
                    moves++;
                    direction ="NONE";
                  }
                }
              }
            }
            if(deltaCol > 0 || (direction == "NONE" || direction == "RIGHT")) { // Move Right
              if(tempGameBoard.getBoardLocation(newFrom.getRow(), newFrom.getColumn()).getPieceName() == EscapePiece.PieceName.BIRD) {
                moveRight();
                moves++;
              } else {
                if(tempGameBoard.getBoardLocation(newFrom.getRow() + 1, newFrom.getColumn()).getLocationType() != LocationType.CLEAR) {
                  gameStatus.setValidMove(false);
                  return gameStatus;
                } else {
                  CoordinateImpl rightCoord = tempGameBoard.getBoardLocation(newFrom.getRow(), newFrom.getColumn() + 1);
                  if(checkForObstacles(tempGameBoard, rightCoord)) {
                    gameStatus.setValidMove(false);
                    return gameStatus;
                  } else {
                    moveRight();
                    moves++;
                    direction = "NONE";
                  }
                }
              }
            }
          //}
          if(deltaRow == 0 && deltaCol == 0){
            gameStatus.setValidMove(true);
            return gameStatus;
          } if(deltaRow == prevDeltaRow && deltaCol == prevDeltaCol){
            gameStatus.setValidMove(false);
            return gameStatus;
          } else {
            prevDeltaRow = deltaRow;
            prevDeltaCol = deltaCol;
          }
        }
        break;